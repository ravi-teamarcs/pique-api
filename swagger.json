{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered."
          },
          "409": {
            "description": "Email already in use."
          }
        },
        "summary": "Register a new user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, returns JWT token."
          },
          "401": {
            "description": "Invalid credentials."
          }
        },
        "summary": "Log in and get a JWT token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/profile": {
      "post": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns user profile information."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user profile from JWT token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "UsersController_getAllUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a list of all users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid or missing JWT token."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UsersController_getUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Get user by ID",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "operationId": "UsersController_updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Update user by ID",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "UsersController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been deleted."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Delete user by ID",
        "tags": [
          "Users"
        ]
      }
    }
  },
  "info": {
    "title": "API Documentation",
    "description": "The API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "Email address of the user"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "Password of the user (min length 6)"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Full name of the user"
          }
        },
        "required": [
          "email",
          "password",
          "name"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "Email address of the user"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "Password of the user"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "User": {
        "type": "object",
        "properties": {}
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of the user",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password of the user",
            "example": "password123"
          },
          "role": {
            "type": "string",
            "description": "Role of the user",
            "example": "venue",
            "enum": [
              "venue",
              "entertainer"
            ]
          }
        }
      }
    }
  }
}